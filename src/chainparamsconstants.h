#ifndef BITCOIN_CHAINPARAMSCONSTANTS_H
#define BITCOIN_CHAINPARAMSCONSTANTS_H
/**
 * Chain params constants for each tracked chain.
 * @generated by contrib/devtools/chainparams/generate_chainparams_constants.py
 */

#include <primitives/blockhash.h>
#include <uint256.h>

namespace ChainParamsConstants {
    const BlockHash MAINNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000000000000002d48e67ae31f113ae6566059778b45cc09eefbbdb17dbbe");
    const uint256 MAINNET_MINIMUM_CHAIN_WORK = uint256S("000000000000000000000000000000000000000001548f89ae52db49cae19165");

    const BlockHash TESTNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("0x000000070e37bfee7e84b94f997f38155a85b22172f5ca25fd4eb3d64c5ad7c5");
    const uint256 TESTNET_MINIMUM_CHAIN_WORK = uint256S("0000000000000000000000000000000000000000000000000000000000000184");;

    const BlockHash TESTNET4_DEFAULT_ASSUME_VALID = BlockHash::fromHex("0000000000fee64dd3e735db39658fb274470b469b9ba4739a3d2815fa09c94a");
    const uint256 TESTNET4_MINIMUM_CHAIN_WORK = uint256S("000000000000000000000000000000000000000000000000007afb6be252bd67");

    // Scalenet re-organizes above height 10,000 - use block 9,999 hash here.
    const BlockHash SCALENET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("000000007fb3362740efd1435aa414f54171993483799782f83c61bc7bf1b1be");
    const uint256 SCALENET_MINIMUM_CHAIN_WORK = uint256S("00000000000000000000000000000000000000000000000003a54dce8032552f");
} // namespace ChainParamsConstants

#endif // BITCOIN_CHAINPARAMSCONSTANTS_H
